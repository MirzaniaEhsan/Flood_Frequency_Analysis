# -*- coding: utf-8 -*-
"""Flood Frequency Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_af-T4s-SehLAuRdUinM0154miHhvhwT
"""

import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt

"""***Flood Frequency Analysis: Calculating the 100-Year Flood Discharge***"""

# Step 1: Input annual peak discharge data (replace with your data)
data = np.array([200, 250, 180, 300, 275, 320, 150, 400, 350, 290, 310, 330, 360, 280, 410, 420, 380, 370, 340, 390])

# Step 2: Rank data in descending order and calculate return period
data_sorted = np.sort(data)[::-1]
rank = np.arange(1, len(data) + 1)
return_period = (len(data) + 1) / rank

# Step 3: Fit Gumbel distribution to the data
params = stats.gumbel_r.fit(data)  # Fit the Gumbel distribution
mu, beta = params  # Location and scale parameters

# Step 4: Calculate discharge for 100-year return period (T = 100)
T = 100
probability = 1 - 1 / T  # Exceedance probability
Q_100 = stats.gumbel_r.ppf(probability, mu, beta)  # Discharge for 100-year return period

print(f"Discharge for a 100-year return period: {Q_100:.2f} m^3/s")

# Step 5: Plot data and return period curve
plt.figure(figsize=(10, 6))
plt.plot(return_period, data_sorted, 'o-', label="Observed Data")

# Generate theoretical return periods and corresponding discharges
theoretical_rp = np.linspace(1.01, 500, 500)  # Avoid division by zero
probabilities = 1 - 1 / theoretical_rp
theoretical_discharges = stats.gumbel_r.ppf(probabilities, mu, beta)

plt.plot(theoretical_rp, theoretical_discharges, 'r--', label="Gumbel Distribution")

# Customize plot
plt.xscale("log")
plt.xlabel("Return Period (years)")
plt.ylabel("Peak Discharge (m^3/s)")
plt.title("Flood Frequency Analysis")
plt.grid(True, which="both", linestyle="--", linewidth=0.5)
plt.legend()
plt.show()